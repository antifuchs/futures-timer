var N = null;var searchIndex = {};
searchIndex["futures_timer"]={"doc":"A general purpose crate for working with timeouts and…","items":[[3,"Timer","futures_timer","A \"timer heap\" used to power separately owned instances of…",N,N],[3,"TimerHandle","","A handle to a `Timer` which is used to create instances of…",N,N],[3,"Delay","","A future representing the notification that an elapsed…",N,N],[3,"Interval","","A stream representing notifications at fixed interval",N,N],[3,"SetDefaultError","","Error returned from `TimerHandle::set_fallback`.",N,N],[0,"ext","","Extension traits for the standard `Stream` and `Future`…",N,N],[3,"Timeout","futures_timer::ext","Future returned by the `FutureExt::timeout` method.",N,N],[3,"TimeoutStream","","Stream returned by the `StreamExt::timeout` method.",N,N],[8,"FutureExt","","An extension trait for futures which provides convenient…",N,N],[11,"timeout","","Creates a new future which will take at most `dur` time to…",0,[[["self"],["duration"]],["timeout"]]],[11,"timeout_at","","Creates a new future which will resolve no later than `at`…",0,[[["self"],["instant"]],["timeout"]]],[8,"StreamExt","","An extension trait for streams which provides convenient…",N,N],[11,"timeout","","Creates a new stream which will take at most `dur` time to…",1,[[["self"],["duration"]],["timeoutstream"]]],[11,"new","futures_timer","Creates a new future which will fire at `dur` time into…",2,[[["duration"]],["delay"]]],[11,"new_at","","Creates a new future which will fire at the time specified…",2,[[["instant"]],["delay"]]],[11,"new_handle","","Creates a new future which will fire at the time specified…",2,[[["instant"],["timerhandle"]],["delay"]]],[11,"reset","","Resets this timeout to an new timeout which will fire at…",2,[[["self"],["duration"]]]],[11,"reset_at","","Resets this timeout to an new timeout which will fire at…",2,[[["self"],["instant"]]]],[11,"new","","Creates a new interval which will fire at `dur` time into…",3,[[["duration"]],["interval"]]],[11,"new_at","","Creates a new interval which will fire at the time…",3,[[["instant"],["duration"]],["interval"]]],[11,"new_handle","","Creates a new interval which will fire at the time…",3,[[["instant"],["duration"],["timerhandle"]],["interval"]]],[11,"new","","Creates a new timer heap ready to create new timers.",4,[[],["timer"]]],[11,"handle","","Returns a handle to this timer heap, used to create new…",4,[[["self"]],["timerhandle"]]],[11,"next_event","","Returns the time at which this timer next needs to be…",4,[[["self"]],["option",["instant"]]]],[11,"advance","","Proces any timers which are supposed to fire at or before…",4,[[["self"]]]],[11,"advance_to","","Proces any timers which are supposed to fire before `now`…",4,[[["self"],["instant"]]]],[11,"set_as_global_fallback","","Configures this timer handle to be the one returned by…",5,[[["self"]],["result",["setdefaulterror"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_future","","",4,[[["self"]],["f"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into_future","","",2,[[["self"]],["f"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","futures_timer::ext","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into_future","","",7,[[["self"]],["f"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"clone","futures_timer","",5,[[["self"]],["timerhandle"]]],[11,"clone","","",6,[[["self"]],["setdefaulterror"]]],[11,"drop","","",2,[[["self"]]]],[11,"drop","","",4,[[["self"]]]],[11,"default","","",5,[[],["timerhandle"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"poll","futures_timer::ext","",7,[[["self"]],["poll"]]],[11,"poll","futures_timer","",2,[[["self"]],["poll",["error"]]]],[11,"poll","","",4,[[["self"]],["poll"]]],[11,"poll","futures_timer::ext","",8,[[["self"]],["poll",["option"]]]],[11,"poll","futures_timer","",3,[[["self"]],["poll",["option","error"]]]]],"paths":[[8,"FutureExt"],[8,"StreamExt"],[3,"Delay"],[3,"Interval"],[3,"Timer"],[3,"TimerHandle"],[3,"SetDefaultError"],[3,"Timeout"],[3,"TimeoutStream"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
